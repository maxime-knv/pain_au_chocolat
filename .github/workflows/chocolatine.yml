name: chocolatine

on:
  push:
    branches-ignore:
        - "ga-ignore-*"
  pull_request:
    branches-ignore:
        - "ga-ignore-*"
env:
  MIRROR_URL: git@github.com:EpitechPGEPromo2029/B-DOP-200-PAR-2-1-chocolatine-maxime.kournikov.git
  EXECUTABLE: "chocolatine,chocolatine2"

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    name: check_coding_style
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: print_coding_style
          run: |
            check.sh $(pwd) $(pwd)
            cdsfile="coding-style-reports.log"
            IFS=":"
            while read -r file_name lines error_type error ; do
              echo "$error::error file=$error_type,line=$lines::$error"
            done < "$cdsfile"
              if [ -s $cdsfile ]; then
                  exit 1
              fi

  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: compile_project
        run: make
        timeout-minutes: 2
      - run: make clean
      - name: check_binary_exist
        run: |
          binary=$(echo $EXECUTABLE | tr "," "\n")
          for bin in $binary ; do
            if [ ! -f "$bin" ]; 
            then
              echo "File is not exist"
              exit 1
            fi
            if [ ! -x "$bin" ];
              then
                echo "Executable is not exist"
                exit 1
            fi
          done

  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          name: compile_tests
          run: make run_tests

  push_to_mirror:
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}

